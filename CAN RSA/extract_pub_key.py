import base64
with open('candump - 副本.log', 'r') as f, open('result.hex', 'w') as f_hex, open('result.bin', 'wb') as f_bin:
    list1 = f.readlines()

    count = 1
    data = []
    key_hex = ''
    for i in list1:
        if count % 66 == 0:
            #data = i[41:45]
            pass
        elif count % 65 == 1:
            data = i[41:45]
            pass
        else:
            data = i[31:45]

        count += 1
        key_hex += data          ##十六进制字符串

    key_bytes = bytes.fromhex(key_hex)   ##
    f_hex.write(key_hex+'\n')
    f_bin.write(key_bytes)
#得到经过编码的证书
#print(key_hex)              ##16进制数据
#print(key_bytes)            ##key_bytes = b'Base64 encoded string\n'
#print(key_bytes.decode())    ##打印原始的Base64编码的密钥内容
#print(base64.b64decode(b''.join(key_bytes.split(b'\n')[1:-1])).hex())  #Base64解码进行解码，并将其结果以十六进制格式打印出来
#原始的16进制数据的公钥
#30820120
#300d06
#092a864886f70d0101010500
#0382010d00
#30820108
#028181         N
#028fff9dd3e6fe9781649eb7fe5e9303cf696347c4110bc4ba3969f0b11669840c51d81a6842b6df2b090f21cd76d4371a8c0e47048c965eca5b46913afbb8da052072a0566d7039c618aba9065759b059e29e485dc5061a16ac63129438d9354e65df5747546b85db3d699819c4b7732df927c7084a5d52d6e6d6aac144623425
#028181         E
#01f8fba410052df7eda3462f1aacd69e40760433ca335767cd7305a3d090805a5fd405dd6eea70e98f0ca1e1cf254748671bf0c98006c20eee1d6279043509fe7a98238b439160a5612da71e904514e81280617e307c3cd33a4c6fca31d0441fbb18d83caf4bd46f6b9297a80a142dd69bf1a357ccb5e4c200b6d90f15a3  
n_string ="028fff9dd3e6fe9781649eb7fe5e9303cf696347c4110bc4ba3969f0b11669840c51d81a6842b6df2b090f21cd76d4371a8c0e47048c965eca5b46913afbb8da052072a0566d7039c618aba9065759b059e29e485dc5061a16ac63129438d9354e65df5747546b85db3d699819c4b7732df927c7084a5d52d6e6d6aac144623425"
n = int(n_string,16) 
#print(n)
N = 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597         
#facrotDB
p = 15991846970993213322072626901560749932686325766403404864023341810735319249066370916090640926219079368845510444031400322229147771682961132420481897362843199
q = 28805791771260259486856902729020438686670354441296247148207862836064657849735343618207098163901787287368569768472521344635567334299356760080507454640207003
# https://github.com/RsaCtfTool/RsaCtfTool/issues/304
e = 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619

enc = 49204714858589959506425439175649050431712689077552080337419353493097408019421214668787900602380476464749282877075822584378756221224722944848685142270406954588911362016685713099949058708493084032575436033859064998703946175169856560687276793237892152502134788316092552043085946089668969326209343517732349235471

import libnum
d = libnum.invmod(e, (p-1)*(q-1))   #已知e 和pq 计算d
m = pow(enc, d, n)                  #解密   
flag = libnum.n2s(m)                #整数转换为ASCLL字符串
#print(d)
print(flag) 
